/*
 * 자동차
 * 
 * - 자동차 번호
 * - 자동차 브랜드
 * - 출시 날짜
 * - 색상
 * - 가격
 * 
 * */

CREATE TABLE TBL_CAR(
	CAR_ID NUMBER,
	CAR_BRAND VARCHAR2(1000),
	CAR_RELEASE_DATE DATE,
	CAR_COLOR VARCHAR2(1000),
	CAR_PRICE NUMBER,
	CONSTRAINT PK_CAR PRIMARY KEY(CAR_ID)
);

CREATE TABLE TBL_CAR(
	CAR_ID NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
	CAR_BRAND VARCHAR2(1000),
	CAR_RELEASE_DATE DATE,
	CAR_COLOR VARCHAR2(1000),
	CAR_PRICE NUMBER
);

DROP TABLE TBL_CAR;

ALTER TABLE TBL_CAR DROP CONSTRAINT PK_CAR;
ALTER TABLE TBL_CAR ADD CONSTRAINT PK_CAR PRIMARY KEY(CAR_ID);

/*
 * 동물 테이블 생성
 * 
 * - 고유 번호
 * - 종류
 * - 나이
 * - 먹이
 * 
 * */

CREATE TABLE TBL_WILD_ANIMAL(
	ANIMAL_ID NUMBER CONSTRAINT PK_WILD_ANIMAL PRIMARY KEY,
	ANIMAL_SPECIES_CODE NUMBER,
	ANIMAL_AGE NUMBER,
	ANIMAL_FOOD VARCHAR2(1000)
);

CREATE TABLE TBL_ANIMAL_SPECIES(
	SPECIES_ID NUMBER CONSTRAINT PK_ANIMAL_SPECIES PRIMARY KEY,
	SPECIES_NAME VARCHAR2(1000)
);

DROP TABLE TBL_WILD_ANIMAL;

/*
 * 학생 테이블 생성
 * 
 * - 학생 번호
 * - 학생 아이디
 * - 학생 이름
 * - 전공
 * - 성별
 * - 생년월일
 * - (추가) 학생 나이 NOT NULL, DEFAULT는 생년월일로 계산된 나이, 19보다 커야한다
 * - (추가) 학생 학점 (A+ ~ F) 'A+', 'A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F'
 *  
 * */

CREATE TABLE TBL_STUDENT(
	STUDENT_ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
	STUDENT_IDENTIFICATION VARCHAR2(1000) CONSTRAINT UK_STUDENT UNIQUE,
	STUDENT_NAME VARCHAR2(1000) CONSTRAINT REQUIRE_NAME NOT NULL,
	STUDENT_MAJOR_CODE NUMBER CONSTRAINT REQUIRE_MAJOR NOT NULL,
	STUDENT_GENDER CHAR(1) DEFAULT 'N' CONSTRAINT BAN_CHAR CHECK(STUDENT_GENDER IN('M', 'F', 'N')) CONSTRAINT REQUIRE_GENDER NOT NULL,
	STUDENT_BIRTH DATE CONSTRAINT BAN_DATE CHECK(STUDENT_BIRTH >= TO_DATE('1985-01-01', 'YYYY-MM-DD')) CONSTRAINT REQUIRE_BIRTH NOT NULL
);

-- [제약조건 추가/변경/삭제]

-- 학생 아이디는 NULL 값을 허용하지 않는다.
ALTER TABLE TBL_STUDENT MODIFY STUDENT_IDENTIFICATION CONSTRAINT REQUIRE_IDENTIFICATION NOT NULL;

-- 제약조건의 이름을 설정하지 않으면 시스템 이름으로 설정되기 때문에 지우고 다시 이름을 붙여주는 것이 좋다.
--ALTER TABLE TBL_STUDENT DROP CONSTRAINT SYS_C007418;

-- BAN_CHAR 제약조건을 없앤다.
ALTER TABLE TBL_STUDENT DROP CONSTRAINT BAN_CHAR;

-- 수정한 BAN_CHAR 제약조건을 추가한다. 
ALTER TABLE TBL_STUDENT ADD CONSTRAINT BAN_CHAR CHECK(STUDENT_GENDER IN ('M', 'W', 'N'));

-- DEFUALT 제약조건은 추가가 아닌 수정으로 진행하며, 학생 성별에 W를 기본 값으로 설정한다.
ALTER TABLE TBL_STUDENT MODIFY STUDENT_GENDER DEFAULT 'W';



-- [제약조건 추가/변경/삭제(실습)]

-- 학생 나이는 NULL 값을 허용하지 않는다.
ALTER TABLE TBL_STUDENT MODIFY STUDENT_AGE CONSTRAINT REQUIRE_AGE NOT NULL;

-- 학생 나이는 19세가 넘어야 한다.
ALTER TABLE TBL_STUDENT ADD CONSTRAINT CHECK_AGE CHECK(STUDENT_AGE >= 19);

-- DEFAULT 값에 다른 컬럼의 값을 가져와 연산할 수 없다. INSERT 또는 다른 언어로 처리해야 한다.
--ALTER TABLE TBL_STUDENT MODIFY STUDENT_AGE DEFAULT TRUNCATE((SYSDATE - STUDENT_BIRTH) / 365);

-- 학생 학점은 IN절에 작성된 문자만 사용 가능하다.
-- IN('A+', 'A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F')
ALTER TABLE TBL_STUDENT ADD CONSTRAINT BAN_GRADE CHECK(STUDENT_GRADE IN('A+', 'A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F'));

-- [컬럼 추가]

ALTER TABLE TBL_STUDENT ADD(STUDENT_AGE NUMBER);
ALTER TABLE TBL_STUDENT ADD(STUDENT_GRADE VARCHAR(10));

SELECT * FROM TBL_STUDENT;

/*조합 키
 * 
 * 하나의 PK에 2개 이상의 컬럼이 조합된 형태
 * 
 * */

/*
 * 
 * TBL_FLOWER
   ---------------------------------
   FLOWER_NAME : VARCHAR2 PK_FLOWER
   FLOWER_COLOR : VARCHAR2 PK_FLOWER
   ---------------------------------
   FLOWER_PRICE : NUMBER NOT NULL

*/

CREATE TABLE TBL_FLOWER(
	FLOWER_NAME VARCHAR2(1000),
	FLOWER_COLOR VARCHAR2(1000),
	FLOWER_PRICE NUMBER CONSTRAINT REQUIRE_PRICE NOT NULL,
	CONSTRAINT PK_FLOWER PRIMARY KEY(FLOWER_NAME, FLOWER_COLOR)
);

DROP TABLE TBL_FLOWER;

/*
   TBL_POT
   ---------------------------------
   POT_ID : NUMBER PK_POT
   ---------------------------------
   POT_COLOR : VARCHAR2 NOT NULL
   POT_SHAPE : VARCHAR2 NOT NULL
   FLOWER_NAME : VARCHAR2 FOREIGN KEY NOT NULL
   FLOWER_COLOR : VARCHAR2 FOREIGN KEY NOT NULL
 * 
 * */

CREATE TABLE TBL_POT(
	POT_ID NUMBER CONSTRAINT PK_POT PRIMARY KEY,
	POT_COLOR VARCHAR2(1000) CONSTRAINT REQUIRE_COLOR NOT NULL,
	POT_SHAPE VARCHAR2(1000) CONSTRAINT REQUIRE_SHAPE NOT NULL,
	FLOWER_NAME VARCHAR2(1000),
	FLOWER_COLOR VARCHAR2(1000),
	CONSTRAINT FK_POT_FLOWER FOREIGN KEY(FLOWER_NAME, FLOWER_COLOR)
	REFERENCES TBL_FLOWER(FLOWER_NAME, FLOWER_COLOR)
);

DROP TABLE TBL_POT;

/*	TBL_PARENT
	----------------
	PARENT_ID : NUMBER PK_POT PK
	----------------
	PARENT_NAME : VARCHAR2 NOT NULL UK
	PARENT_AGE : NUMBER NOT NULL
	PARENT_ADDRESS : VARCHAR2 NOT NULL
	PARENT_MOBILE : VARCHAR2 NOT NULL


	TBL_PET
	----------------
	PET_ID : NUMBER PK_FLOWER PK
	----------------
	PET_NAME : VARCHAR2 NOT NULL UK
	PET_AGE : NUMBER NOT NULL
	PET_SYMPTOM : VARCHAR2 NOT NULL
	PARENT_ID : NUMBER FK*/

CREATE TABLE TBL_PARENT(
	PARENT_ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
	PARENT_NAME VARCHAR2(1000) CONSTRAINT REQUIRE_PARENT_NAME NOT NULL,
	PARENT_AGE NUMBER CONSTRAINT REQUIRE_PARENT_AGE NOT NULL,
	PARENT_ADDRESS VARCHAR2(1000) CONSTRAINT REQUIRE_ADDRESS NOT NULL,
	PARENT_MOBILE VARCHAR2(1000) CONSTRAINT REQUIRE_MOBILE NOT NULL
);

ALTER TABLE TBL_PARENT ADD CONSTRAINT UK_PARENT_NAME UNIQUE(PARENT_NAME);

ALTER TABLE TBL_PARENT MODIFY PARENT_AGE DEFAULT 0;

ALTER TABLE TBL_PARENT DROP CONSTRAINT REQUIRE_PARENT_AGE;

CREATE TABLE TBL_PET(
	PET_ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
	PET_NAME VARCHAR2(1000) CONSTRAINT REQUIRE_NAME_NAME NOT NULL,
	PET_AGE NUMBER CONSTRAINT REQUIRE_AGE_AGE NOT NULL,
	PET_SYMPTOM VARCHAR2(1000) CONSTRAINT REQUIRE_SYMPTOM NOT NULL,
	PET_TYPE_CODE NUMBER,
	PARENT_ID NUMBER
);

ALTER TABLE TBL_PET ADD CONSTRAINT FK_PET_PARENT FOREIGN KEY(PARENT_ID)
	REFERENCES TBL_PARENT(PARENT_ID);

ALTER TABLE TBL_PET ADD CONSTRAINT FK_PET_TYPE_CODE FOREIGN KEY(PET_TYPE_CODE)
	REFERENCES TBL_PET_TYPE(TYPE_ID);

ALTER TABLE TBL_PET DROP CONSTRAINT FK_PET_TYPE_CODE;

ALTER TABLE TBL_PET ADD CONSTRAINT UK_PET_NAME UNIQUE(PET_NAME);


ALTER TABLE TBL_PET MODIFY PET_AGE DEFAULT 0;

CREATE TABLE TBL_PET_TYPE(
	TYPE_ID NUMBER CONSTRAINT PK_PET_TYPE PRIMARY KEY,
	TYPE_NAME VARCHAR2(1000) CONSTRAINT UK_PET_TYPE_NAME UNIQUE
);

DROP TABLE TBL_PET_TYPE;

-- DML

-- 조회
SELECT * FROM TBL_STUDENT;

-- 정보 입력
INSERT INTO TBL_STUDENT (STUDENT_ID, STUDENT_IDENTIFICATION, STUDENT_NAME, STUDENT_MAJOR_CODE, STUDENT_BIRTH, STUDENT_AGE, STUDENT_GRADE)
VALUES(2, 'hds1234', '한동석', 80, '1985-01-01', 40, 'A+');

INSERT INTO TBL_STUDENT (STUDENT_ID, STUDENT_IDENTIFICATION, STUDENT_NAME, STUDENT_MAJOR_CODE, STUDENT_GENDER , STUDENT_BIRTH, STUDENT_AGE, STUDENT_GRADE)
VALUES(3, 'jbg1234', '장보고', 80, 'M','1985-01-01', 40, 'A+');

-- 정보 수정
UPDATE TBL_STUDENT
SET STUDENT_GENDER = 'N'
WHERE STUDENT_ID = 2;

-- 정보 삭제
DELETE FROM TBL_STUDENT
WHERE STUDENT_ID = 3;

TRUNCATE TABLE TBL_STUDENT;



















