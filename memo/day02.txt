무결성
	데이터의 정확성, 일관성, 유효성이 유지되는 것.

	정확성 : 데이터는 애매하지 않아야 한다.
	일관성 : 각 사용자가 일관된 데이터를 볼 수 있도록 해야한다.
	유효성 : 데이터가 실제 존재하는 데이터여야 한다.

1. 개체 무결성 : TABLE
	모든 테이블이 PK로 선택된 컬럼을 가져야 한다.

2. 참조 무결성 : FK
	두 테이블의 데이터가 항상 일관된 값을 가지도록 유지하는 것.

3. 도메인 무결성 : COLUMN
	컬럼의 타입, NULL값의 허용 등에 대한 사항을 정의하고
	올바른 데이터가 입력되었는 지를 확인하는 것.

-------------------------------------------------------------------------------------
모델링(기획)
	추상적인 주제를 DB에 맞게 설계하는 것.

1. 요구사항 분석
	회원, 주문, 상품 : 3가지를 모두 관리하고 싶습니다.

2. 개념적 설계(개념 모델링)
	회원		주문		상품		

	회원 번호		주문 번호		상품 번호

	회원 아이디		주문 날짜		상품 이름
	회원 비밀번호	회원 번호		상품 가격
	회원 이름		상품 번호		상품 재고
	회원 주소		주문 개수
	회원 이메일		
	회원 생일
	회원 핸드폰 번호

3. 논리적 설계(논리 모델링)
	회원		주문		상품		

	회원 번호PK	주문 번호PK	상품 번호PK

	회원 아이디UK	주문 날짜NN	상품 이름NN
	회원 비밀번호NN	회원 번호FK	상품 가격NN
	회원 이름NN	상품 번호FK	상품 재고NN
	회원 주소NN	주문 개수C, D(1)
	회원 이메일UK		
	회원 생일
	회원 핸드폰 번호UK

4. 물리적 설계(물리 모델링)
	TBL_MEMBER			
	----------------
	MEMBER_ID : NUMBER PK_MEMBER PK
	----------------
	MEMBER_IDENTIFICATION : VARCHAR2 UNIQUE
	MEMBER_PASSWORD : VARCHAR2 NOT NULL
	MEMBER_NAME : VARCHAR2 NOT NULL
	MEMBER_ADDRESS : VARCHAR2 NOT NULL
	MEMBER_EMAIL : VARCHAR2 NOT NULL UNIQUE
	MEMBER_BIRTH : DATE
	MEMBER_MOBILE : VARCHAR2 NOT NULL UNIQUE

5. 구현
-------------------------------------------------------------------------------------
[실습]

1. 요구사항 분석
	꽃 테이블과 화분 테이블 2개가 필요하고,
	꽃을 구매할 때 화분도 같이 구매합니다.
	꽃은 이름과 색상, 가격이 있고,
	화분은 제품번호, 색상, 모양이 있습니다.
	화분은 모든 꽃을 담을 수 없고 맞는 꽃들을 담아야 합니다.

2. 개념적 설계(개념적 모델링)
	회원		화분		꽃		

	회원 번호		화분 번호		꽃 번호

	회원 아이디		화분 제품번호	꽃 이름
	회원 비밀번호	화분 색상		꽃 가격
	회원 이름		화분 모양		꽃 색상
	회원 주소		화분 재고		꽃 재고
	회원 이메일		
	회원 생일
	회원 핸드폰 번호

3. 논리적 설계(논리적 모델링)
	회원		화분		꽃		

	회원 번호		화분 번호PK	꽃 번호PK

	회원 아이디		화분 제품번호UK	꽃 이름NN, UK
	회원 비밀번호	화분 색상NN	꽃 색상NN
	회원 이름		화분 모양NN	꽃 가격C, D(0)
	회원 주소		화분 재고C, D(0)	꽃 재고C, D(0)
	회원 이메일		꽃 번호FK		
	회원 생일
	회원 핸드폰 번호

4. 물리적 설계(물리적 모델링)
	TBL_POT
	----------------
	POT_ID : NUMBER PK_POT PK
	----------------
	POT_CODE : NUMBER UK
	POT_COLOR : VARCHAR2 NOT NULL
	POT_SHAPE : VHARCHAR2 NOT NULL
	POT_QUANTITY : CHECK > 0 DEFAULT(0)
	FLOWER_ID : NUMBER FK

	TBL_FLOWER
	----------------
	FLOWER_ID : NUMBER PK_FLOWER PK
	----------------
	FLOWER_NAME : VARCHAR2 NOT NULL UK
	FLOWER_PRICE : NUMBER CHECK > 0 DEFAULT(0)
	FLOWER_COLOR : VARCHAR2 NOT NULL
	FLOWER_QUANTITY : CHECK > 0 DEFAULT(0)

5. 구현	

-------------------------------------------------------------------------------------
[실습2]

1. 요구사항 분석
	동물병원을 오픈하려고 합니다.
	동물의 종과 이름, 나이, 병명이 필요하고 
	보호자의 이름, 나이, 주소, 핸드폰 번호가 필요합니다.
	한명의 보호자는 여러 동물을 등록 할 수 있어야 합니다.

2. 개념적 설계(개념적 모델링)
	보호자		동물	

	보호자 번호		동물 번호	

	보호자 이름		동물 이름
	보호자 나이		동물 나이
			동물 종	
	보호자 주소		동물 병명	
	보호자 핸드폰	보호자 번호	

3. 논리적 설계(논리적 모델링)
	보호자		동물	

	보호자 번호PK	동물 번호PK	

	보호자 이름NN, UK	동물 이름NN, UK
	보호자 나이NN, C	동물 나이NN, C
			동물 종 NN
	보호자 주소NN	동물 병명NN
	보호자 핸드폰NN	보호자 번호FK

4. 물리적 설계(물리적 모델링)
	TBL_PARENT
	----------------
	PARENT_ID : NUMBER PK_PARENT PK
	----------------
	PARENT_NAME : VARCHAR2 NOT NULL UK
	PARENT_AGE : NUMBER NOT NULL
	PARENT_ADDRESS : VARCHAR2 NOT NULL
	PARENT_MOBILE : VARCHAR2 NOT NULL


	TBL_PET
	----------------
	PET_ID : NUMBER PK_PET PK
	----------------
	PET_NAME : VARCHAR2 NOT NULL UK
	PET_AGE : NUMBER NOT NULL
	PET_TYPE_CODE : NUMBER NOT NULL
	PET_SYMPTOM : VARCHAR2 NOT NULL
	PARENT_ID : NUMBER FK

5. 구현

=====================================================
DML(Data Manipulation Language)
	1. SELECT : 조회(검색)
		SELECT [컬럼멍, ...]
		FROM [테이블명]
		WHERE [조건식]
	
	2. INSERT : 추가

		1) 컬럼은 전부 다 작성하지 않아도 되고 필요한 컬럼만 작성할 수 있다.
		INSERT INTO [테이블명] ([컬럼명, ...])
		VALUES([값, ...])
		
		2) 모든 값을 전부 순서대로 작성해야 되며, 컬럼명을 직접 작성하지 않아도 된다.
		INSERT INTO [테이블명]
		VALUES([값, ...])

	3. UPDATE
		UPDATE [테이블명]
		SET [기존 컬럼명] = [값], [기존 컬럼명] = [값], ...
		WHERE [조건식]
 
	4. DELETE
		DELETE FROM [테이블명]
		WHERE [조건식]

-------------------------------------------------------------------------------------
조건식
	>, <		: 초과, 미만
	>=, <=		: 이상, 이하
	=		: 같다
	<>, !=, ^=	: 같지 않다
	AND		: 둘 다 참이면 참
	OR		: 둘 중 하나라도 참이면 참

※ 위 연산자들은 WHERE 절에서 사용 가능하다.














